{"version":3,"file":"static/js/595.27293060.chunk.js","mappings":"mPAEaA,GAAWC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6CAGRC,GAAYD,EAAAA,EAAAA,IAAO,MAAPA,CAAH,yCAGTE,GAAOF,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6J,SCNJG,EAAW,SAAC,GAAc,IAC/BC,EAD8B,EAAXC,KACHC,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,GAAlC,OACxB,UAACX,EAAD,WACGS,IACC,SAACP,EAAD,CACEU,IAAG,yCAAoCH,GACvCI,IAAKH,KAGT,uBAAIA,KACJ,uCAAeF,KAAe,MARjBG,EADS,IAY1B,OAAO,SAACR,EAAD,UAAOE,GACf,E,SCgBD,EA1Ba,WACX,OAAwBS,EAAAA,EAAAA,UAAS,MAAjC,eAAOR,EAAP,KAAaS,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,QAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAAwCH,EAAAA,EAAAA,UAAS,IAAjD,eAAOI,EAAP,KAAqBC,EAArB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAeR,OAbAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,aAAiBH,EAAU,YACxBI,MAAK,SAAAC,GACJV,EAAQU,EAAInB,MACZW,EAAU,WACX,IACAS,OAAM,SAAAC,GACLR,EAAgB,uDAChBF,EAAU,YACVW,QAAQC,IAAIF,EAAIG,QACjB,GACJ,GAAE,CAACV,KAGF,UAACW,EAAA,EAAD,WACc,aAAXf,IAAyB,SAACZ,EAAD,CAAUE,KAAMA,IAC9B,aAAXU,IAAyB,uBAAIE,MAGnC,C,uFC7BKc,GAAU/B,EAAAA,EAAAA,IAAO,UAAPA,CAAH,sEAKA8B,EAAY,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAC1B,OAAO,SAAC2B,EAAD,UAAU3B,GAClB,C,6FCPK4B,EAAU,mCACVC,EAAW,gCAEXC,EAAW,mCAAG,6GAEKC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAC9DG,OAAQ,CACNC,QAASL,KAJG,cAEVM,EAFU,yBAOTA,EAAOC,MAPE,sCASV,IAAIC,MAAM,KAAMX,SATN,yDAAH,qDAaXY,EAAe,mCAAG,WAAMC,GAAN,gGAECP,EAAAA,EAAAA,IAAA,UAAaF,EAAb,gBAAqC,CACxDG,OAAQ,CACNM,MAAOA,EACPL,QAASL,KALO,cAEdM,EAFc,yBAQbA,EAAOC,MARM,sCAUd,IAAIC,MAAM,KAAMX,SAVF,yDAAH,sDAcfc,EAAY,mCAAG,WAAOjC,GAAP,4FAAWkC,EAAX,+BAAkB,GAAlB,kBAEIT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BvB,GAA9B,OAAmCkC,GAAQ,CAC9DR,OAAQ,CACNC,QAASL,KAJI,cAEXM,EAFW,yBAOVA,EAAOC,MAPG,sCASX,IAAIC,MAAM,KAAMX,SATL,yDAAH,sDAaLP,EAAM,CACjBY,YAAAA,EACAO,gBAAAA,EACAE,aAAAA,E","sources":["components/Cast/Cast.styled.js","components/Cast/CastList.jsx","components/Cast/Cast.jsx","components/Container/Container.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastItem = styled('li')`\n  list-style: none;\n`;\nexport const CastImage = styled('img')`\n  width: 120px;\n`;\nexport const List = styled('ul')`\n  padding: 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 10px;\n  text-align: center;\n  font-size: 11px;\n`;\n","import { List, CastImage, CastItem } from './Cast.styled';\n\nexport const CastList = ({ cast }) => {\n  const children = cast.map(({ character, profile_path, name, id }) => (\n    <CastItem key={id}>\n      {profile_path && (\n        <CastImage\n          src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n          alt={name}\n        />\n      )}\n      <p>{name}</p>\n      <p>Character: {character}</p>{' '}\n    </CastItem>\n  ));\n  return <List>{children}</List>;\n};\n","import { useState, useEffect } from 'react';\nimport { API } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from './CastList';\nimport { Container } from 'components/Container/Container';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    API.getMovieById(moviesId, '/credits')\n      .then(res => {\n        setCast(res.cast);\n        setStatus('resolved');\n      })\n      .catch(err => {\n        setErrorMessage(\"Sorry, we can't find information about this movie..\");\n        setStatus('rejected');\n        console.log(err.message);\n      });\n  }, [moviesId]);\n\n  return (\n    <Container>\n      {status === 'resolved' && <CastList cast={cast} />}\n      {status === 'rejected' && <p>{errorMessage}</p>}\n    </Container>\n  );\n};\nexport default Cast;\n","import styled from 'styled-components';\n\nconst Wrapper = styled('section')`\n  padding: 20px 30px;\n  text-align: center;\n`;\n\nexport const Container = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n","import axios from 'axios';\n\nconst API_KEY = 'e70bd309128506851c85e884e52b1998';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  try {\n    const result = await axios.get(`${BASE_URL}trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getSearchMovies = async query => {\n  try {\n    const result = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        query: query,\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (id, info = '') => {\n  try {\n    const result = await axios.get(`${BASE_URL}movie/${id}${info}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const API = {\n  getTrending,\n  getSearchMovies,\n  getMovieById,\n};\n"],"names":["CastItem","styled","CastImage","List","CastList","children","cast","map","character","profile_path","name","id","src","alt","useState","setCast","status","setStatus","errorMessage","setErrorMessage","moviesId","useParams","useEffect","API","then","res","catch","err","console","log","message","Container","Wrapper","API_KEY","BASE_URL","getTrending","axios","params","api_key","result","data","Error","getSearchMovies","query","getMovieById","info"],"sourceRoot":""}